#ifndef TESTS_PRG_TVS_HPP
#define TESTS_PRG_TVS_HPP

#include <array>
#include <cstdint>

namespace prg_tvs {
  constexpr std::array<uint8_t, 16> key_128{
      0xa4, 0xb7, 0x73, 0x7c, 0xe2, 0xc6, 0x34, 0x26,
      0xc3, 0x18, 0x3a, 0xed, 0x44, 0x75, 0x2d, 0xa9,
  };
  constexpr std::array<uint8_t, 16> iv_128{
      0x53, 0x37, 0x68, 0xca, 0x3e, 0xbe, 0x56, 0x22,
      0xf6, 0x7a, 0x7c, 0xa1, 0x55, 0x3a, 0x6c, 0x1b,
  };
  constexpr uint32_t tweak_128 = 4033911726;
  constexpr std::array<uint8_t, 240> expected_128{
      0x17, 0x64, 0xc1, 0x41, 0xe9, 0x1f, 0x06, 0x6d, 0xda, 0x53, 0x4f, 0xa2, 0x60, 0x78, 0x3f,
      0x0b, 0x6f, 0x98, 0x5a, 0x5f, 0xd3, 0xc8, 0x92, 0xf2, 0xc2, 0x5c, 0xf5, 0xa7, 0x9f, 0xbd,
      0xdf, 0x54, 0x6f, 0x81, 0x26, 0x43, 0x87, 0x31, 0x8b, 0x46, 0x3b, 0x51, 0x4b, 0xb8, 0xaa,
      0xae, 0x2a, 0xb6, 0x2f, 0xa0, 0x20, 0xfe, 0x72, 0x48, 0x15, 0x67, 0x14, 0x29, 0x79, 0xf9,
      0xd3, 0x96, 0xd9, 0x06, 0x2b, 0x8a, 0x95, 0xe2, 0x1e, 0x13, 0x2a, 0xcf, 0x10, 0xf7, 0x85,
      0x5f, 0xfe, 0xc2, 0x42, 0x66, 0x48, 0x27, 0x40, 0x8a, 0x57, 0x24, 0x1f, 0x11, 0x70, 0x0a,
      0x15, 0x69, 0xb8, 0x70, 0xf9, 0x97, 0x4c, 0xfd, 0xce, 0x99, 0xcd, 0x7b, 0x66, 0x66, 0x9b,
      0x5c, 0xfe, 0x6a, 0x0f, 0x05, 0x12, 0x46, 0xee, 0xac, 0xf6, 0x13, 0x04, 0xbc, 0xa6, 0x43,
      0x3b, 0xda, 0x01, 0xd0, 0x09, 0x79, 0x42, 0x4d, 0x4f, 0x64, 0x6c, 0x5d, 0x87, 0x77, 0xe4,
      0xf4, 0x10, 0x64, 0x81, 0x42, 0xa9, 0x06, 0x6b, 0xff, 0xdc, 0xb1, 0x7b, 0x86, 0x63, 0x84,
      0x66, 0x9c, 0x29, 0x79, 0xbf, 0xa1, 0x12, 0x30, 0xda, 0x7f, 0x17, 0xc9, 0xe0, 0x57, 0x35,
      0x82, 0x07, 0x0a, 0x5d, 0x2a, 0x27, 0x79, 0xed, 0x47, 0x28, 0x38, 0x41, 0xa0, 0x62, 0x00,
      0xc9, 0x46, 0x4e, 0x49, 0xb6, 0x21, 0xba, 0x69, 0x67, 0x86, 0x34, 0x9d, 0xa1, 0x6d, 0x93,
      0x6a, 0xcd, 0x41, 0xf1, 0xcc, 0xd1, 0x27, 0x85, 0xfe, 0xb2, 0xa0, 0xd4, 0x68, 0x45, 0x23,
      0xc8, 0x52, 0xf8, 0x13, 0x45, 0xf2, 0xf9, 0x1e, 0x3d, 0x48, 0x8f, 0xc7, 0x2b, 0x3e, 0x61,
      0xbc, 0x04, 0x88, 0x77, 0xd5, 0xc5, 0x75, 0x58, 0x16, 0xe6, 0x42, 0x52, 0x1f, 0xfc, 0x78,
  };
  constexpr std::array<uint8_t, 24> key_192{
      0x5e, 0xf5, 0x66, 0x9f, 0xd6, 0x95, 0xd8, 0xd3, 0x7c, 0x47, 0x78, 0x6e,
      0x5e, 0x67, 0x78, 0x9a, 0xdd, 0x65, 0xb2, 0x6a, 0x17, 0xe8, 0x61, 0xa9,
  };
  constexpr std::array<uint8_t, 16> iv_192{
      0x3e, 0x92, 0x24, 0x14, 0xb3, 0xdf, 0xd7, 0xca,
      0xd1, 0x4d, 0x77, 0x74, 0x10, 0xe3, 0x9c, 0x3a,
  };
  constexpr uint32_t tweak_192 = 2526505534;
  constexpr std::array<uint8_t, 240> expected_192{
      0xa5, 0x49, 0x4d, 0x82, 0x3a, 0x5d, 0xdb, 0xd3, 0x3f, 0x41, 0xf3, 0x79, 0xcf, 0xe9, 0xb6,
      0x91, 0x47, 0x09, 0x14, 0xa5, 0x2a, 0xa4, 0x0f, 0xad, 0x88, 0x19, 0x56, 0xde, 0x34, 0xd8,
      0xb4, 0xf9, 0x34, 0xda, 0xdc, 0xc3, 0x48, 0x70, 0xd1, 0xdf, 0x3b, 0xdb, 0xb7, 0x67, 0x67,
      0xcc, 0xa5, 0x78, 0x09, 0xa1, 0xcc, 0xa9, 0xb8, 0x54, 0x21, 0xac, 0xf1, 0xd9, 0xaf, 0x69,
      0xed, 0x33, 0x16, 0x73, 0x49, 0x3d, 0xdb, 0x83, 0xed, 0x7f, 0x61, 0x62, 0x4c, 0xf4, 0xc7,
      0x9d, 0xa5, 0xd9, 0x31, 0x91, 0x73, 0xff, 0xaa, 0x11, 0xbf, 0x39, 0x73, 0x6b, 0x19, 0xcb,
      0x53, 0xc1, 0x3c, 0x09, 0xac, 0xf4, 0x3b, 0x9c, 0x7a, 0xf1, 0x41, 0xe3, 0xd0, 0x4d, 0x5b,
      0xd3, 0x59, 0xf5, 0xe8, 0xd7, 0x2f, 0xee, 0x40, 0xaf, 0x08, 0xcf, 0xf2, 0x40, 0x6a, 0xd2,
      0xe2, 0x15, 0x54, 0xd8, 0x12, 0xb9, 0x73, 0xa7, 0xba, 0xf3, 0xdd, 0x19, 0x81, 0xe0, 0x22,
      0x7d, 0x03, 0xb9, 0xcd, 0x05, 0xaf, 0x78, 0x80, 0x45, 0x43, 0x92, 0xe9, 0x58, 0x95, 0x40,
      0xe0, 0x8e, 0xd6, 0xe9, 0xd8, 0x0f, 0xe4, 0xec, 0x37, 0x89, 0x4b, 0x03, 0xcf, 0xfe, 0x07,
      0xef, 0xc8, 0x74, 0x97, 0xa9, 0x86, 0x58, 0x69, 0x7b, 0x49, 0x4f, 0x00, 0xf6, 0xe1, 0x6f,
      0x0c, 0x70, 0x24, 0x11, 0xac, 0x0f, 0x6a, 0xa3, 0xec, 0x41, 0x95, 0x29, 0xec, 0x12, 0x92,
      0x4b, 0x90, 0x68, 0x35, 0x26, 0xc9, 0xea, 0x92, 0x47, 0xb9, 0x6f, 0xde, 0x57, 0xa9, 0x2b,
      0xee, 0x81, 0x14, 0x96, 0xae, 0xc9, 0x21, 0x20, 0xd5, 0xd0, 0x41, 0x91, 0x1e, 0xc4, 0xcb,
      0x82, 0xad, 0xd8, 0x47, 0xed, 0xbf, 0x8a, 0x7f, 0xe8, 0xd3, 0xc2, 0x44, 0xf2, 0xf3, 0xf2,
  };
  constexpr std::array<uint8_t, 32> key_256{
      0xbb, 0xdb, 0x41, 0x77, 0x2e, 0xc3, 0x9e, 0x81, 0x41, 0x52, 0x0b,
      0xe1, 0xfa, 0x3c, 0xd8, 0x0f, 0xc5, 0xc5, 0xd4, 0xcd, 0xa1, 0xbc,
      0x04, 0xa6, 0xcd, 0x0f, 0xab, 0x8c, 0xfb, 0xf5, 0xb7, 0xf0,
  };
  constexpr std::array<uint8_t, 16> iv_256{
      0xc4, 0xe6, 0x63, 0xd1, 0x2f, 0xf0, 0x94, 0x5a,
      0x5b, 0x41, 0x87, 0x02, 0xe5, 0x16, 0xc7, 0xa3,
  };
  constexpr uint32_t tweak_256 = 1865907688;
  constexpr std::array<uint8_t, 240> expected_256{
      0x35, 0x72, 0xe7, 0x79, 0xc7, 0xbe, 0x02, 0xcb, 0x57, 0xed, 0x0e, 0xa5, 0xf1, 0x57, 0xf5,
      0x37, 0x43, 0xdb, 0x17, 0xc3, 0x18, 0xfe, 0xcd, 0x46, 0x32, 0x2f, 0x1c, 0xe4, 0x62, 0x21,
      0x93, 0xee, 0x65, 0xb6, 0x67, 0xc4, 0x96, 0xff, 0xb0, 0xca, 0xe0, 0xbe, 0x4d, 0x58, 0x15,
      0x82, 0x4a, 0x24, 0xce, 0x97, 0xc6, 0x42, 0x00, 0x12, 0x7b, 0xe6, 0xfe, 0x11, 0x79, 0x7b,
      0x2a, 0x1e, 0xad, 0xf1, 0x84, 0x88, 0x59, 0x7b, 0x13, 0x51, 0xe5, 0x8d, 0xe0, 0x37, 0x0a,
      0x5f, 0x63, 0xc4, 0x31, 0x1d, 0x37, 0x72, 0x8e, 0x3f, 0xe1, 0x35, 0x29, 0xdd, 0x31, 0xa1,
      0x22, 0x66, 0x3b, 0xe3, 0x89, 0x6f, 0x54, 0xca, 0x37, 0x29, 0x78, 0x95, 0x67, 0x29, 0x8e,
      0xdd, 0xe4, 0xa9, 0xd8, 0xbb, 0x8d, 0x70, 0x7a, 0x95, 0x7f, 0x6f, 0xe1, 0xa4, 0x01, 0x3d,
      0x1a, 0x75, 0xc8, 0x2e, 0xed, 0xc7, 0xf2, 0xaa, 0xa3, 0x47, 0xb6, 0x43, 0x39, 0x47, 0x3e,
      0x5b, 0x70, 0xaa, 0x2c, 0x3b, 0x1f, 0x77, 0xd1, 0x57, 0xb6, 0x8d, 0x1e, 0x80, 0x42, 0x94,
      0x93, 0x82, 0x85, 0x20, 0x7a, 0x38, 0x57, 0xd6, 0x01, 0xc0, 0xb8, 0xc7, 0xe2, 0xcb, 0xa9,
      0xb9, 0x78, 0x04, 0x4e, 0xb5, 0x65, 0xc5, 0x17, 0x49, 0x31, 0x54, 0xc5, 0xc9, 0xa5, 0x66,
      0xae, 0xa8, 0x55, 0x70, 0xbb, 0x2b, 0x74, 0xdd, 0x4b, 0x3a, 0x09, 0x4a, 0x65, 0x3e, 0x3a,
      0x8a, 0xe1, 0xac, 0xee, 0xfa, 0xbd, 0xc1, 0xd3, 0x3e, 0x22, 0x66, 0x16, 0x8d, 0xbb, 0x5d,
      0x51, 0x10, 0x15, 0xd3, 0x15, 0xb5, 0xc4, 0x92, 0x10, 0x2d, 0x17, 0xb2, 0x83, 0xd5, 0xf4,
      0x7a, 0xbb, 0x9a, 0xf4, 0x17, 0x41, 0xf9, 0xdd, 0x9c, 0x43, 0x5c, 0x48, 0x34, 0x8f, 0xe5,
  };
} // namespace prg_tvs

#endif
