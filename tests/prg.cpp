/*
 *  SPDX-License-Identifier: MIT
 */

#include "../aes.h"

#include <boost/test/unit_test.hpp>
#include <array>

namespace {
  typedef std::array<uint8_t, 16> block_t;
} // namespace

BOOST_AUTO_TEST_SUITE(prgs)

BOOST_AUTO_TEST_CASE(test_increment_counter) {
  block_t iv = {
      0x8e, 0xa2, 0xb7, 0xca, 0x51, 0x67, 0x45, 0xbf,
      0xea, 0xfc, 0x49, 0x90, 0x4b, 0x49, 0x6f, 0xff,
  };
  {
    constexpr block_t iv_expected = {
        0x8f, 0xa2, 0xb7, 0xca, 0x51, 0x67, 0x45, 0xbf,
        0xea, 0xfc, 0x49, 0x90, 0x4b, 0x49, 0x6f, 0xff,
    };
    aes_increment_iv(iv.data());
    BOOST_TEST(iv == iv_expected);
  }

  iv = {
      0xff, 0xa2, 0xb7, 0xca, 0x51, 0x67, 0x45, 0xbf,
      0xea, 0xfc, 0x49, 0x90, 0x4b, 0x49, 0x6f, 0xff,
  };
  {
    constexpr block_t iv_expected = {
        0x00, 0xa3, 0xb7, 0xca, 0x51, 0x67, 0x45, 0xbf,
        0xea, 0xfc, 0x49, 0x90, 0x4b, 0x49, 0x6f, 0xff,
    };
    aes_increment_iv(iv.data());
    BOOST_TEST(iv == iv_expected);
  }
}

BOOST_AUTO_TEST_CASE(test_prg_128) {
  constexpr uint8_t key_128[16] = {
      0x9d, 0x79, 0xb1, 0xa3, 0x7f, 0x31, 0x80, 0x1c,
      0xd1, 0x1a, 0x67, 0x06, 0xfb, 0x40, 0xd6, 0xbd,
  };
  constexpr uint8_t iv_128[16] = {
      0x97, 0x67, 0xc2, 0x18, 0x8e, 0x12, 0xe6, 0x5b,
      0x13, 0x64, 0xf5, 0xd8, 0x71, 0x7b, 0x0d, 0x58,
  };
  constexpr uint8_t tweak_128[4]          = {0x12, 0x47, 0xd4, 0x91};
  constexpr uint8_t expected_128[15 * 16] = {
      0xd5, 0x73, 0xc0, 0x1b, 0x43, 0x60, 0x76, 0xc5, 0x57, 0x12, 0x02, 0x1f, 0x50, 0x38, 0xd3,
      0x6e, 0xa0, 0xb2, 0x3b, 0xca, 0xf6, 0x4f, 0x46, 0x92, 0x27, 0xc7, 0xc1, 0x2e, 0xe4, 0x44,
      0x6c, 0x1a, 0xb9, 0x65, 0x90, 0x83, 0x19, 0xfe, 0x32, 0x53, 0xda, 0x03, 0xe0, 0x47, 0xd3,
      0x88, 0x34, 0x05, 0x5e, 0x92, 0x82, 0x9c, 0x5c, 0xeb, 0x05, 0x4b, 0x1f, 0x3a, 0x92, 0xd4,
      0x71, 0xf5, 0x03, 0xf7, 0x22, 0xe2, 0x99, 0xb2, 0xfd, 0x46, 0xa0, 0x77, 0x0b, 0x36, 0x30,
      0x49, 0x43, 0xa9, 0x80, 0x73, 0x10, 0x22, 0x52, 0xa3, 0x29, 0x8a, 0x12, 0x2c, 0xd4, 0x9c,
      0x13, 0x8c, 0x4f, 0x44, 0x3d, 0x09, 0xd2, 0xc0, 0xd1, 0xef, 0x11, 0xdf, 0x15, 0x02, 0x6e,
      0x89, 0x7c, 0xf3, 0xdc, 0xb1, 0xec, 0x0c, 0xb3, 0x19, 0x6d, 0x38, 0x39, 0x04, 0x5f, 0xa6,
      0xcf, 0xf1, 0xf8, 0x65, 0x83, 0x39, 0x50, 0x71, 0x94, 0xce, 0x46, 0x0d, 0xf6, 0x9d, 0x28,
      0xf2, 0x7f, 0xfe, 0xe2, 0xf6, 0x19, 0x08, 0x93, 0x00, 0xca, 0x36, 0x6c, 0x17, 0x83, 0x7f,
      0x55, 0xaa, 0x67, 0x15, 0xb5, 0x91, 0xe7, 0x5e, 0xf9, 0x70, 0x8f, 0x96, 0x6f, 0x9f, 0x14,
      0x27, 0x75, 0x95, 0x8d, 0x1c, 0xfa, 0x64, 0x58, 0xcc, 0xf3, 0xcf, 0xeb, 0x1c, 0xc2, 0xf3,
      0xcd, 0x17, 0x37, 0x3e, 0x20, 0x8b, 0x23, 0xf1, 0xe9, 0xcc, 0xd4, 0xf4, 0xbb, 0xca, 0x63,
      0x59, 0x82, 0x4e, 0x95, 0x7a, 0xca, 0x41, 0x30, 0xd8, 0x23, 0xba, 0x3b, 0xa2, 0xbc, 0x91,
      0x6b, 0xe2, 0x43, 0x0b, 0x64, 0x1e, 0x43, 0x48, 0x24, 0xd3, 0x44, 0x08, 0x35, 0xa7, 0x19,
      0xa7, 0xc4, 0xfc, 0x48, 0xd3, 0xe5, 0xe4, 0x50, 0xb0, 0x85, 0xf9, 0x25, 0x3e, 0xed, 0x17,
  };

  uint8_t output_128[15 * 16] = {0};
  prg(key_128, iv_128, tweak_128, output_128, 128, 15 * 16);
  BOOST_TEST(output_128 == expected_128);
}

BOOST_AUTO_TEST_CASE(test_prg_192) {
  constexpr uint8_t key_192[24]           = {0x50, 0xe1, 0x65, 0xe4, 0x34, 0x24, 0x9d, 0x8b,
                                             0x82, 0x9f, 0x41, 0x16, 0x69, 0x84, 0x2a, 0x97,
                                             0x99, 0x11, 0x03, 0x6c, 0xf3, 0xe8, 0x22, 0x08};
  constexpr uint8_t iv_192[16]            = {0x97, 0x67, 0xc2, 0x18, 0x8e, 0x12, 0xe6, 0x5b,
                                             0x13, 0x64, 0xf5, 0xd8, 0x71, 0x7b, 0x0d, 0x58};
  constexpr uint8_t tweak_192[4]          = {0x12, 0x47, 0xd4, 0x91};
  constexpr uint8_t expected_192[15 * 16] = {
      0x45, 0x9e, 0x69, 0x48, 0xd8, 0x1b, 0x99, 0xb8, 0x38, 0xd4, 0x79, 0x3f, 0xa9, 0x4a, 0x5e,
      0x21, 0x0b, 0x58, 0xa4, 0xe7, 0x99, 0x2a, 0x9b, 0xf6, 0x77, 0x6b, 0x85, 0x42, 0x8e, 0x3a,
      0x62, 0x50, 0xc6, 0x2e, 0x38, 0xaa, 0xbb, 0xd7, 0x76, 0xaa, 0xb0, 0xe1, 0xec, 0xc8, 0x23,
      0x74, 0x56, 0xe7, 0xb4, 0x89, 0xd8, 0xeb, 0x6b, 0xdd, 0x9e, 0x66, 0x2b, 0x2e, 0x2c, 0x44,
      0x86, 0x4f, 0x72, 0x70, 0x45, 0x60, 0xb2, 0x46, 0x25, 0x71, 0x87, 0x33, 0xc8, 0xf2, 0xb6,
      0xa1, 0x3d, 0xa1, 0x57, 0x2e, 0x4f, 0xf1, 0x92, 0x90, 0x07, 0x7b, 0xac, 0x35, 0x5b, 0x7d,
      0xdd, 0x36, 0xaf, 0x05, 0xe2, 0x2a, 0x4e, 0xac, 0x90, 0xcf, 0x43, 0x4d, 0x5e, 0x04, 0xd9,
      0x7b, 0xd2, 0xe5, 0x0c, 0xb5, 0xcc, 0x7e, 0xd4, 0x11, 0x6a, 0x18, 0xae, 0x59, 0x8c, 0xa0,
      0xbc, 0x91, 0xb0, 0x2a, 0x57, 0x07, 0xda, 0x2b, 0xac, 0xda, 0x94, 0x1e, 0x97, 0xd8, 0x3a,
      0xee, 0x32, 0x9d, 0x06, 0x60, 0xd4, 0x87, 0x1a, 0x1e, 0x24, 0x5e, 0x9a, 0x1b, 0x9e, 0x17,
      0x34, 0x80, 0xfa, 0x2a, 0x47, 0x5a, 0xe0, 0x41, 0xf6, 0x96, 0xd5, 0x08, 0xb8, 0x12, 0xe9,
      0x7f, 0x55, 0x43, 0xd7, 0x8d, 0x34, 0x32, 0x11, 0x16, 0x4c, 0x98, 0x93, 0x23, 0x77, 0x85,
      0xe4, 0x2a, 0x45, 0x93, 0xd0, 0x23, 0x86, 0xff, 0x76, 0x63, 0x30, 0xd2, 0x44, 0x79, 0x77,
      0x48, 0x57, 0x50, 0xeb, 0x5c, 0xdc, 0x3b, 0x6a, 0xa2, 0x24, 0xbe, 0x31, 0x86, 0xe4, 0xa8,
      0xda, 0x4c, 0xbf, 0xcd, 0xdd, 0x95, 0xe0, 0x56, 0x4f, 0x5f, 0x4c, 0x4f, 0xc0, 0xa8, 0xb3,
      0x13, 0x0e, 0xcb, 0x88, 0x54, 0x83, 0x0a, 0x94, 0xc0, 0x46, 0x11, 0x68, 0x86, 0x43, 0x04,
  };

  uint8_t output_192[15 * 16] = {0};
  prg(key_192, iv_192, tweak_192, output_192, 192, 15 * 16);
  BOOST_TEST(output_192 == expected_192);
}

BOOST_AUTO_TEST_CASE(test_prg_256) {
  constexpr uint8_t key_256[32] = {
      0xf6, 0x48, 0x81, 0x8b, 0xa4, 0xa6, 0x65, 0x6b, 0xe0, 0xcb, 0x6e,
      0x38, 0x2a, 0x5d, 0xff, 0x72, 0xac, 0x1d, 0xda, 0x96, 0x90, 0x81,
      0x37, 0x47, 0x8b, 0xd5, 0x36, 0xcf, 0x4b, 0x77, 0x8a, 0xde,
  };
  constexpr uint8_t iv_256[16] = {
      0x97, 0x67, 0xc2, 0x18, 0x8e, 0x12, 0xe6, 0x5b,
      0x13, 0x64, 0xf5, 0xd8, 0x71, 0x7b, 0x0d, 0x58,
  };
  constexpr uint8_t tweak_256[4]          = {0x12, 0x47, 0xd4, 0x91};
  constexpr uint8_t expected_256[15 * 16] = {
      0x2a, 0x72, 0x33, 0x33, 0xff, 0x8a, 0x8a, 0x5f, 0xfe, 0x4a, 0x0e, 0x77, 0x16, 0xaf, 0xe9,
      0x21, 0x1d, 0x69, 0x39, 0x46, 0xb9, 0xd3, 0x4b, 0x3c, 0x56, 0x58, 0x15, 0x23, 0x10, 0x6f,
      0x52, 0xa7, 0xfa, 0xc7, 0x9e, 0x98, 0x42, 0xc1, 0xe1, 0xf2, 0x2b, 0xa7, 0x12, 0x4c, 0x2c,
      0xfb, 0x3c, 0xd9, 0x92, 0x83, 0xba, 0x3b, 0x7a, 0x2e, 0x91, 0xee, 0x1c, 0x13, 0x13, 0x23,
      0x87, 0xf7, 0x6c, 0x7a, 0xe9, 0xb2, 0x8d, 0x0c, 0x3d, 0x7f, 0xaa, 0xa3, 0xd1, 0x34, 0xfe,
      0xe6, 0xac, 0x85, 0x43, 0xef, 0x3e, 0x81, 0x35, 0x9f, 0xd2, 0x9f, 0xda, 0x9b, 0x62, 0xaf,
      0x0d, 0xeb, 0x14, 0x3c, 0x78, 0x8f, 0x22, 0x89, 0x73, 0x4c, 0xc8, 0xf2, 0x6b, 0xdb, 0xf7,
      0x03, 0x6c, 0x7d, 0x56, 0x7c, 0xf6, 0x57, 0xf7, 0x0b, 0xc0, 0x44, 0x6a, 0xf8, 0xdd, 0x5d,
      0x25, 0x8c, 0x14, 0x01, 0x0d, 0x57, 0x1e, 0x00, 0x62, 0x80, 0xb9, 0x93, 0xdc, 0x91, 0xef,
      0x2e, 0x6a, 0x73, 0x28, 0x67, 0x68, 0xae, 0x67, 0xf3, 0xe6, 0xfc, 0xd7, 0xca, 0xdd, 0xf2,
      0xc1, 0x9e, 0x09, 0x5b, 0x69, 0xe2, 0x54, 0xbf, 0x3c, 0xc9, 0x54, 0x16, 0x09, 0xc4, 0x4f,
      0x6f, 0xd3, 0x49, 0x3c, 0x0a, 0xbe, 0xd3, 0x85, 0xe9, 0x72, 0x3a, 0x86, 0x09, 0xa1, 0xd2,
      0xd7, 0xdc, 0xc3, 0x19, 0x12, 0x58, 0xa6, 0xe5, 0xea, 0xac, 0x8d, 0x0f, 0x75, 0xae, 0x8f,
      0x7a, 0x4e, 0x6b, 0x97, 0x51, 0x3d, 0xc1, 0x6a, 0xca, 0x0f, 0xeb, 0x77, 0xf8, 0xbc, 0x7e,
      0x59, 0xae, 0x92, 0x15, 0xa6, 0x5f, 0x0a, 0x50, 0x96, 0xd2, 0xfd, 0x17, 0x26, 0xac, 0x47,
      0xe5, 0x9e, 0xd7, 0x0e, 0x50, 0x35, 0x02, 0xa3, 0x79, 0xbb, 0x7d, 0xbf, 0x2d, 0xbe, 0x5d,
  };

  uint8_t output_256[15 * 16] = {0};
  prg(key_256, iv_256, tweak_256, output_256, 256, 15 * 16);
  BOOST_TEST(output_256 == expected_256);
}

BOOST_AUTO_TEST_SUITE_END()
