#ifndef TESTS_AES_WITNESS_TVS_HPP
#define TESTS_AES_WITNESS_TVS_HPP

#include "parameters.h"

#include <array>
#include <cstdint>

namespace aes_witness_tvs {
  namespace aes_128 {
    constexpr std::array<uint8_t, FAEST_128S_SK_SIZE> sk{
        0xc1, 0xa3, 0xc0, 0x22, 0xe7, 0x18, 0x93, 0x5f, 0x46, 0x63, 0x03,
        0x86, 0xaf, 0xa3, 0xd3, 0xf2, 0xc0, 0x72, 0x0b, 0x10, 0xbf, 0x26,
        0x6c, 0x19, 0x24, 0x18, 0x87, 0x72, 0xc5, 0x1f, 0xbe, 0x52,
    };
    constexpr std::array<uint8_t, FAEST_128S_PK_SIZE> pk{
        0xc1, 0xa3, 0xc0, 0x22, 0xe7, 0x18, 0x93, 0x5f, 0x46, 0x63, 0x03,
        0x86, 0xaf, 0xa3, 0xd3, 0xf2, 0xe1, 0x57, 0x09, 0xfe, 0x67, 0xa8,
        0xb5, 0x37, 0xb5, 0x35, 0x89, 0x15, 0x52, 0x4e, 0xb6, 0xf0,
    };

    constexpr std::array<uint8_t, (FAEST_128S_ELL + 7) / 8> witness{
        0xc0, 0x72, 0x0b, 0x10, 0xbf, 0x26, 0x6c, 0x19, 0x24, 0x18, 0x87, 0x72, 0xc5, 0x1f, 0xbe,
        0x52, 0x01, 0xdc, 0x0b, 0xb6, 0x57, 0x84, 0x78, 0x79, 0xbc, 0xb6, 0x27, 0x08, 0x22, 0x85,
        0xf6, 0x6f, 0x43, 0x2d, 0x60, 0x56, 0x9f, 0xc5, 0x2e, 0xe4, 0x78, 0x1a, 0x2b, 0x68, 0x7f,
        0xe1, 0xea, 0x3d, 0x6a, 0x05, 0x3a, 0x77, 0x94, 0xa8, 0x8a, 0x86, 0x81, 0x4d, 0xe7, 0x6b,
        0x58, 0x35, 0xcd, 0xba, 0x3d, 0xd5, 0x16, 0x1c, 0x47, 0x99, 0x22, 0xf2, 0x75, 0x6f, 0x09,
        0xd6, 0xe7, 0x1d, 0xc7, 0x42, 0x22, 0xd7, 0x54, 0x35, 0xc2, 0xa6, 0x73, 0x11, 0xaa, 0x32,
        0x99, 0xc3, 0x3f, 0x42, 0x84, 0x1c, 0xfd, 0x5b, 0xdf, 0xba, 0x0c, 0x93, 0x83, 0xe8, 0x4c,
        0xce, 0xde, 0xa5, 0x84, 0x3f, 0x25, 0xc9, 0x15, 0x5a, 0x7e, 0x0c, 0x7a, 0x29, 0xd6, 0xa0,
        0x2a, 0x93, 0xb7, 0xf2, 0xeb, 0x6d, 0xad, 0x50, 0x54, 0x32, 0x5a, 0x4d, 0xe9, 0xc9, 0xcb,
        0xac, 0x5d, 0x90, 0x10, 0x0f, 0x9a, 0x45, 0x54, 0xee, 0x84, 0x1a, 0xed, 0x05, 0x02, 0x96,
        0x78, 0x82, 0x79, 0x22, 0x57, 0x1a, 0xea, 0x65, 0x19, 0xce,
    };
  } // namespace aes_128

#if 0
  constexpr std::array<uint8_t, FAEST_SECRET_KEY_BYTES<v2::faest_192_s>>
      faest_tvs<v2::faest_192_s>::sk = {
          0x71, 0x4f, 0x4c, 0x85, 0x5d, 0xc3, 0x4e, 0xaf, 0xba, 0xa6, 0xd0, 0xc9, 0xa6, 0xcb,
          0x67, 0xef, 0x59, 0x4c, 0xbc, 0x98, 0x5a, 0x23, 0x9f, 0x97, 0x85, 0x9c, 0x0f, 0x5d,
          0xbc, 0x9c, 0x65, 0xee, 0xbd, 0x3a, 0x87, 0x1f, 0xc9, 0x3c, 0x17, 0xe3,
  };

  constexpr std::array<uint8_t, FAEST_PUBLIC_KEY_BYTES<v2::faest_192_s>>
      faest_tvs<v2::faest_192_s>::pk = {
          0x71, 0x4f, 0x4c, 0x85, 0x5d, 0xc3, 0x4e, 0xaf, 0xba, 0xa6, 0xd0, 0xc9,
          0xa6, 0xcb, 0x67, 0xef, 0xbc, 0xc9, 0x22, 0x82, 0xfe, 0x26, 0xa4, 0xc1,
          0x85, 0x25, 0xd1, 0xe6, 0x07, 0x19, 0xcd, 0x3d, 0x10, 0xe5, 0xb7, 0x38,
          0x4b, 0xc0, 0x14, 0xb4, 0x79, 0x2f, 0x49, 0xf2, 0x2c, 0xe5, 0x2d, 0xf9,
  };

  constexpr std::array<uint8_t, (v2::faest_192_s::OWF_CONSTS::WITNESS_BITS + 7) / 8>
      faest_tvs<v2::faest_192_s>::witness = {
          0x59, 0x4c, 0xbc, 0x98, 0x5a, 0x23, 0x9f, 0x97, 0x85, 0x9c, 0x0f, 0x5d, 0xbc, 0x9c, 0x65,
          0xee, 0xbd, 0x3a, 0x87, 0x1f, 0xc9, 0x3c, 0x17, 0xe3, 0xb3, 0xbc, 0xad, 0x45, 0x5f, 0x54,
          0xf3, 0x0c, 0x24, 0x39, 0x95, 0x22, 0x93, 0x25, 0xf6, 0xac, 0x6a, 0xf0, 0x9b, 0x44, 0xe4,
          0x51, 0x3c, 0xce, 0x00, 0x1f, 0x3d, 0xe7, 0xde, 0xaf, 0x1a, 0x1e, 0x93, 0x1a, 0xe4, 0x48,
          0xdb, 0xdf, 0xee, 0x1d, 0x76, 0x9e, 0xa7, 0x31, 0xca, 0x68, 0xa1, 0x1c, 0x75, 0x62, 0xa1,
          0x7d, 0xcc, 0xc9, 0xb3, 0x7b, 0xc4, 0x61, 0xc9, 0x86, 0xcb, 0xc2, 0x34, 0xd8, 0x46, 0xe5,
          0x46, 0xdf, 0x83, 0x86, 0x3e, 0xdb, 0xc5, 0xa8, 0x7b, 0x16, 0x47, 0xb6, 0x78, 0x18, 0xa6,
          0x42, 0x19, 0x7c, 0x52, 0x24, 0xad, 0xdd, 0xe4, 0xe5, 0x3b, 0xdf, 0xf3, 0x1b, 0x0e, 0xb1,
          0x32, 0x36, 0x70, 0x57, 0x26, 0xc7, 0x7c, 0x2b, 0x47, 0xee, 0xb9, 0x4f, 0xc8, 0x27, 0xf2,
          0x38, 0xdd, 0x84, 0x3c, 0x29, 0x2b, 0x05, 0xb2, 0xad, 0xee, 0xe5, 0x97, 0x9b, 0xf0, 0x7f,
          0x8a, 0xf7, 0x31, 0x83, 0x7f, 0xd5, 0x4a, 0x5d, 0x1e, 0x4f, 0x12, 0xa0, 0x93, 0x42, 0xd5,
          0x70, 0x2d, 0xfe, 0x8b, 0xa7, 0xe8, 0x69, 0x37, 0xd5, 0x34, 0x25, 0x6c, 0x1a, 0x86, 0x68,
          0x43, 0x8c, 0x6d, 0x73, 0x94, 0x1a, 0xe4, 0x48, 0xdb, 0xdf, 0xee, 0x1d, 0x05, 0x9e, 0xa7,
          0x31, 0xca, 0x68, 0xa1, 0x50, 0x75, 0x62, 0xd0, 0x7d, 0xcc, 0xec, 0xb3, 0x7b, 0x63, 0x4b,
          0xf2, 0xd4, 0xdf, 0xb3, 0x99, 0x59, 0x1c, 0x9a, 0x39, 0xd8, 0xd5, 0x07, 0xa5, 0x43, 0x21,
          0x12, 0x47, 0x49, 0x9b, 0x75, 0xd0, 0x8e, 0xa7, 0x88, 0x45, 0x35, 0xcd, 0x58, 0x13, 0x15,
          0x86, 0xf2, 0xad, 0xd0, 0x75, 0x4e, 0x71, 0x96, 0x91, 0x40, 0x87, 0x81, 0x56, 0xfe, 0x83,
          0xaf, 0xf3, 0x8f, 0x29, 0x8e, 0x18, 0x45, 0x08, 0xfb, 0x54, 0xb7, 0xbc, 0x07, 0x38, 0x11,
          0x84, 0x2f, 0x5b, 0xf0, 0xaf, 0x87, 0xbf, 0x5d, 0x06, 0xe0, 0xc8, 0xd6, 0x1a, 0x83, 0x78,
          0x54, 0x61, 0x12, 0xa5, 0xc9, 0x89, 0x60, 0x3b, 0xe5, 0x7a, 0xa7, 0xe8, 0xcb, 0xab, 0x95,
          0x6d, 0x72, 0xc9, 0x01, 0xf5, 0x34, 0x91, 0xe9, 0x51, 0xb2, 0x87, 0xca,
  };

  constexpr std::array<uint8_t, FAEST_SECRET_KEY_BYTES<v2::faest_256_s>>
      faest_tvs<v2::faest_256_s>::sk = {
          0x56, 0xbe, 0x29, 0xa6, 0x14, 0x66, 0x5b, 0x84, 0xab, 0xb8, 0x80, 0x85,
          0x65, 0xca, 0x30, 0x59, 0x8d, 0x14, 0x3b, 0x6e, 0x79, 0x37, 0x99, 0xfd,
          0xe7, 0x61, 0x7b, 0x4a, 0x73, 0x4f, 0x49, 0x73, 0xa4, 0x10, 0x82, 0x59,
          0xc3, 0x6d, 0x33, 0x00, 0xa3, 0x45, 0x2d, 0xe6, 0xcc, 0x68, 0x19, 0xac,
  };

  constexpr std::array<uint8_t, FAEST_PUBLIC_KEY_BYTES<v2::faest_256_s>>
      faest_tvs<v2::faest_256_s>::pk = {
          0x56, 0xbe, 0x29, 0xa6, 0x14, 0x66, 0x5b, 0x84, 0xab, 0xb8, 0x80, 0x85,
          0x65, 0xca, 0x30, 0x59, 0xb5, 0xec, 0x1e, 0x47, 0xcf, 0xb0, 0x84, 0x23,
          0x4b, 0x57, 0x35, 0xcf, 0x8b, 0x7d, 0xdb, 0xf5, 0x5c, 0x7e, 0x83, 0x9a,
          0xbe, 0xec, 0x1f, 0xe3, 0x72, 0x61, 0x7f, 0x24, 0x51, 0x92, 0xd7, 0xea,
  };

  constexpr std::array<uint8_t, (v2::faest_256_s::OWF_CONSTS::WITNESS_BITS + 7) / 8>
      faest_tvs<v2::faest_256_s>::witness = {
          0x8d, 0x14, 0x3b, 0x6e, 0x79, 0x37, 0x99, 0xfd, 0xe7, 0x61, 0x7b, 0x4a, 0x73, 0x4f, 0x49,
          0x73, 0xa4, 0x10, 0x82, 0x59, 0xc3, 0x6d, 0x33, 0x00, 0xa3, 0x45, 0x2d, 0xe6, 0xcc, 0x68,
          0x19, 0xac, 0xc9, 0xc0, 0xaa, 0x25, 0x92, 0x25, 0xfe, 0xa1, 0x86, 0x59, 0x43, 0x97, 0xfc,
          0xdd, 0xec, 0x4a, 0xd6, 0x5e, 0xe3, 0x78, 0xe0, 0x78, 0xa3, 0xbc, 0x1a, 0x7f, 0x86, 0xf7,
          0xe8, 0xe7, 0xd2, 0x0c, 0x62, 0x3a, 0x1a, 0xeb, 0xa2, 0x39, 0x8c, 0x58, 0xa8, 0x66, 0x12,
          0x79, 0xd1, 0x43, 0x4b, 0xbc, 0xff, 0x70, 0x18, 0xb0, 0x94, 0xe7, 0x6a, 0x31, 0x85, 0x7e,
          0x22, 0x93, 0x84, 0xc9, 0xb9, 0x11, 0xf4, 0x79, 0x27, 0x44, 0x71, 0xa7, 0xba, 0xfe, 0x77,
          0x69, 0x9f, 0x8d, 0xf4, 0xed, 0x61, 0x5e, 0xe9, 0xe1, 0x91, 0xb8, 0x95, 0x1d, 0x9e, 0x42,
          0x7d, 0x5f, 0xb7, 0x75, 0xc8, 0x53, 0x11, 0xf3, 0x31, 0x48, 0xd9, 0x7c, 0xa5, 0x49, 0xe1,
          0x87, 0x6b, 0x7b, 0x59, 0x6a, 0xb3, 0xd8, 0xa1, 0x1c, 0x17, 0x1d, 0x2a, 0x1f, 0xa4, 0x08,
          0xa6, 0xd7, 0xe6, 0xe0, 0xb2, 0x92, 0xf3, 0x25, 0xc6, 0x47, 0x94, 0x64, 0x91, 0xe6, 0xc4,
          0x7e, 0xee, 0xb4, 0xc8, 0x47, 0xa0, 0x3e, 0x04, 0x87, 0x84, 0x89, 0xb0, 0x69, 0x4e, 0xa2,
          0xe6, 0x2e, 0xf2, 0x9c, 0x57, 0x54, 0x43, 0x6d, 0x34, 0x3f, 0xce, 0x80, 0x0b, 0xa2, 0x6d,
          0x3c, 0x5a, 0xb9, 0x56, 0xa4, 0x7b, 0xaa, 0xdb, 0xed, 0xb3, 0x9a, 0xd7, 0xa4, 0xd2, 0x45,
          0xc3, 0x94, 0xdd, 0x5e, 0x04, 0x28, 0x7a, 0x93, 0x4d, 0xa7, 0xfa, 0x6e, 0x23, 0xed, 0x7d,
          0xdf, 0xfd, 0x7d, 0x98, 0x43, 0xcd, 0xef, 0xb1, 0x8a, 0xcb, 0x75, 0x9e, 0xe7, 0x6a, 0x31,
          0x85, 0x7e, 0x22, 0x93, 0xc4, 0xc9, 0xb9, 0x11, 0xf4, 0x79, 0x27, 0x79, 0x71, 0xa7, 0x31,
          0xfe, 0x77, 0x67, 0x9f, 0x8d, 0x53, 0xcb, 0x36, 0xf5, 0xa5, 0xa3, 0xe9, 0xa7, 0x80, 0x09,
          0x4c, 0x08, 0x87, 0xfe, 0x25, 0x78, 0x5b, 0x24, 0x64, 0x66, 0x45, 0x97, 0x17, 0xa2, 0x71,
          0xb1, 0x8f, 0x7d, 0x3b, 0xcc, 0x8c, 0x54, 0x5c, 0x12, 0x0c, 0x78, 0xfb, 0x26, 0x07, 0xbd,
          0x8b, 0x26, 0x82, 0xd7, 0xb5, 0x3a, 0xfa, 0xfb, 0x15, 0xd8, 0x83, 0xcf, 0xa1, 0xd5, 0x6c,
          0xbc, 0x83, 0x2b, 0x3f, 0xf7, 0x84, 0x09, 0x27, 0x1e, 0xc8, 0x22, 0x77, 0xc4, 0xf9, 0x6b,
          0x75, 0x78, 0xe3, 0x5a, 0x9d, 0xa3, 0x6c, 0x44, 0xa9, 0xd6, 0x72, 0x21, 0xf4, 0x1b, 0x40,
          0x33, 0x22, 0xa3, 0x1f, 0x99, 0x3b, 0x16, 0xf4, 0xff, 0xdb, 0xd4, 0x28, 0xfc, 0x5d, 0x6d,
          0xd1, 0x45, 0x16, 0xa5, 0x56, 0x63, 0xeb, 0x46, 0x24, 0xe7, 0x53, 0xd4, 0x3b, 0x98, 0x4a,
          0xcb, 0x72, 0xbc, 0xa6, 0x5e, 0x6f, 0x6c, 0x94, 0x1a, 0x2c, 0xe3, 0x95, 0xf1,
  };

  constexpr std::array<uint8_t, FAEST_SECRET_KEY_BYTES<v2::faest_em_128_s>>
      faest_tvs<v2::faest_em_128_s>::sk = {
          0x26, 0x3e, 0x27, 0x6e, 0x9d, 0x61, 0x9c, 0x4f, 0xe6, 0xb9, 0xb4,
          0x0d, 0x1f, 0x5a, 0xe8, 0x1b, 0x78, 0xff, 0xd6, 0xd1, 0x95, 0x73,
          0xdb, 0x9f, 0xa4, 0x08, 0xe8, 0xcb, 0x29, 0xf8, 0x2e, 0x27,
  };

  constexpr std::array<uint8_t, FAEST_PUBLIC_KEY_BYTES<v2::faest_em_128_s>>
      faest_tvs<v2::faest_em_128_s>::pk = {
          0x26, 0x3e, 0x27, 0x6e, 0x9d, 0x61, 0x9c, 0x4f, 0xe6, 0xb9, 0xb4,
          0x0d, 0x1f, 0x5a, 0xe8, 0x1b, 0x0b, 0x46, 0x05, 0x70, 0x71, 0x8d,
          0x15, 0x9b, 0x08, 0x7a, 0xa0, 0x11, 0x26, 0x9e, 0xa1, 0x5a,
  };

  constexpr std::array<uint8_t, (v2::faest_em_128_s::OWF_CONSTS::WITNESS_BITS + 7) / 8>
      faest_tvs<v2::faest_em_128_s>::witness = {
          0x78, 0xff, 0xd6, 0xd1, 0x95, 0x73, 0xdb, 0x9f, 0xa4, 0x08, 0xe8, 0xcb, 0x29, 0xf8, 0x2e,
          0x27, 0xad, 0xb7, 0x71, 0xea, 0xb2, 0xd5, 0xf1, 0xed, 0xe8, 0xe7, 0xd2, 0xed, 0x14, 0x95,
          0xd3, 0x30, 0x3f, 0x5e, 0x62, 0xc1, 0x7f, 0x83, 0x17, 0x11, 0x1c, 0xf4, 0x5e, 0x17, 0x9e,
          0x7b, 0x99, 0xfb, 0xfe, 0x48, 0x6c, 0xef, 0x5b, 0x76, 0xc5, 0xd9, 0x10, 0xb8, 0x6a, 0x7a,
          0x73, 0xf4, 0xe9, 0x57, 0x2d, 0x83, 0x4b, 0xad, 0x17, 0x98, 0xcc, 0x79, 0x67, 0xbf, 0x78,
          0x16, 0x2d, 0x71, 0xf0, 0x47, 0x8e, 0x65, 0x60, 0x1c, 0x25, 0x20, 0x9f, 0x49, 0xae, 0x52,
          0xcc, 0xee, 0xb7, 0xed, 0x62, 0x91, 0xa1, 0xa7, 0x9d, 0x38, 0xf2, 0xf3, 0x66, 0xbb, 0x3d,
          0xdd, 0x76, 0xfb, 0xa8, 0xcd, 0x3f, 0x3e, 0xb3, 0xe7, 0xf6, 0x8a, 0x29, 0xb3, 0xe1, 0x4a,
  };

  constexpr std::array<uint8_t, FAEST_SECRET_KEY_BYTES<v2::faest_em_192_s>>
      faest_tvs<v2::faest_em_192_s>::sk = {
          0xf1, 0x79, 0x59, 0xde, 0x6a, 0x99, 0xbb, 0xdc, 0x75, 0xb2, 0x04, 0x63,
          0x6f, 0x1d, 0xd2, 0x5f, 0x27, 0x0d, 0x32, 0x94, 0xa2, 0xa4, 0x5d, 0x1d,
          0xcc, 0x86, 0xc5, 0xfe, 0x76, 0xb4, 0x1e, 0x56, 0xb3, 0xaa, 0x64, 0x55,
          0x42, 0x6c, 0x8f, 0x62, 0xc4, 0x7b, 0xd8, 0x5c, 0x3a, 0x96, 0xaf, 0xa1,
  };

  constexpr std::array<uint8_t, FAEST_PUBLIC_KEY_BYTES<v2::faest_em_192_s>>
      faest_tvs<v2::faest_em_192_s>::pk = {
          0xf1, 0x79, 0x59, 0xde, 0x6a, 0x99, 0xbb, 0xdc, 0x75, 0xb2, 0x04, 0x63,
          0x6f, 0x1d, 0xd2, 0x5f, 0x27, 0x0d, 0x32, 0x94, 0xa2, 0xa4, 0x5d, 0x1d,
          0xc9, 0x6c, 0x12, 0xdc, 0x5b, 0x57, 0x6e, 0x01, 0xab, 0x4a, 0x43, 0x13,
          0x53, 0x5a, 0x48, 0x3a, 0x80, 0x85, 0x2f, 0x10, 0x56, 0x48, 0x5c, 0xe6,
  };

  constexpr std::array<uint8_t, (v2::faest_em_192_s::OWF_CONSTS::WITNESS_BITS + 7) / 8>
      faest_tvs<v2::faest_em_192_s>::witness = {
          0xcc, 0x86, 0xc5, 0xfe, 0x76, 0xb4, 0x1e, 0x56, 0xb3, 0xaa, 0x64, 0x55, 0x42, 0x6c, 0x8f,
          0x62, 0xc4, 0x7b, 0xd8, 0x5c, 0x3a, 0x96, 0xaf, 0xa1, 0xb8, 0xcf, 0xfe, 0xe9, 0x9d, 0x1f,
          0x9f, 0x89, 0x5b, 0xe5, 0x47, 0xc8, 0x8f, 0xe3, 0xdf, 0x6d, 0x6c, 0x63, 0xea, 0x3a, 0xdd,
          0xde, 0xd5, 0x4c, 0xfa, 0x58, 0x91, 0x1f, 0x01, 0x8a, 0x70, 0x95, 0x99, 0xe6, 0x4b, 0x40,
          0x1f, 0x89, 0xd3, 0xca, 0x29, 0xe1, 0xf7, 0x5e, 0xc9, 0x8b, 0x3e, 0x91, 0xce, 0x00, 0x10,
          0x38, 0x35, 0x67, 0xb7, 0x5a, 0xc7, 0x94, 0xf9, 0xf7, 0x0b, 0x55, 0x6b, 0x70, 0x03, 0x92,
          0xb2, 0xf0, 0x14, 0x68, 0x7e, 0x84, 0x81, 0x65, 0x7a, 0xbe, 0xba, 0x88, 0xcc, 0x8f, 0xcf,
          0x31, 0x26, 0xe9, 0x14, 0x99, 0x17, 0x7b, 0xf1, 0x88, 0x99, 0x83, 0x09, 0xed, 0xa4, 0x1e,
          0x1d, 0xc3, 0xc9, 0x55, 0xa0, 0x02, 0xbe, 0x84, 0x24, 0x44, 0x39, 0xd4, 0x33, 0xa3, 0xc5,
          0x7e, 0x3c, 0x6b, 0xaa, 0x66, 0x83, 0x6d, 0x75, 0xc9, 0x86, 0x7a, 0x56, 0xe1, 0x26, 0x01,
          0x28, 0xf4, 0x77, 0x9c, 0xa2, 0xef, 0xef, 0xa4, 0xbd, 0xdd, 0x84, 0xdb, 0x52, 0x67, 0x04,
          0x67, 0xc5, 0xd2, 0x17, 0xf4, 0xc6, 0x63, 0x95, 0x9d, 0xfc, 0x9f, 0x4e, 0xb7, 0x5f, 0x5e,
          0x20, 0x6d, 0xae, 0x5d, 0x4f, 0x8a, 0xe6, 0x63, 0x32, 0x35, 0xda, 0xfd, 0x91, 0x58, 0xb0,
          0xb5, 0x85, 0x2d, 0x5e, 0x02, 0xe6, 0xd2, 0x5c, 0x62, 0xd8, 0x61, 0xbc, 0x4e, 0x22, 0x89,
          0x5c, 0x6f, 0x8a, 0xd4, 0xe7, 0x4d,
  };

  constexpr std::array<uint8_t, FAEST_SECRET_KEY_BYTES<v2::faest_em_256_s>>
      faest_tvs<v2::faest_em_256_s>::sk = {
          0xf7, 0x33, 0xd0, 0xca, 0x3c, 0xc2, 0xb5, 0xd0, 0x7f, 0x64, 0xa4, 0x6b, 0xbd,
          0x02, 0x67, 0x2c, 0xed, 0x19, 0xfb, 0x73, 0x5b, 0xf0, 0x46, 0xaf, 0x23, 0x6e,
          0x38, 0x79, 0x85, 0x13, 0x79, 0xd3, 0xba, 0x1b, 0x19, 0x49, 0xcb, 0x0f, 0x46,
          0xe3, 0x55, 0xf7, 0xc6, 0xa4, 0x2f, 0x54, 0xf7, 0x00, 0x60, 0xc0, 0xca, 0xd1,
          0xbc, 0x89, 0x20, 0x89, 0xb4, 0x85, 0xde, 0xbc, 0xa7, 0xfe, 0x73, 0xa4,
  };

  constexpr std::array<uint8_t, FAEST_PUBLIC_KEY_BYTES<v2::faest_em_256_s>>
      faest_tvs<v2::faest_em_256_s>::pk = {
          0xf7, 0x33, 0xd0, 0xca, 0x3c, 0xc2, 0xb5, 0xd0, 0x7f, 0x64, 0xa4, 0x6b, 0xbd,
          0x02, 0x67, 0x2c, 0xed, 0x19, 0xfb, 0x73, 0x5b, 0xf0, 0x46, 0xaf, 0x23, 0x6e,
          0x38, 0x79, 0x85, 0x13, 0x79, 0xd3, 0xca, 0x83, 0x27, 0x76, 0xd0, 0x2d, 0x6b,
          0x43, 0x98, 0x5c, 0x37, 0xfe, 0x47, 0x9f, 0x69, 0xb8, 0x70, 0xcc, 0x23, 0x95,
          0x93, 0x9d, 0xd3, 0xf1, 0xc9, 0xaa, 0xbe, 0x8b, 0x82, 0x2c, 0x97, 0xad,
  };

  constexpr std::array<uint8_t, (v2::faest_em_256_s::OWF_CONSTS::WITNESS_BITS + 7) / 8>
      faest_tvs<v2::faest_em_256_s>::witness = {
          0xba, 0x1b, 0x19, 0x49, 0xcb, 0x0f, 0x46, 0xe3, 0x55, 0xf7, 0xc6, 0xa4, 0x2f, 0x54, 0xf7,
          0x00, 0x60, 0xc0, 0xca, 0xd1, 0xbc, 0x89, 0x20, 0x89, 0xb4, 0x85, 0xde, 0xbc, 0xa7, 0xfe,
          0x73, 0xa4, 0x3d, 0xc7, 0x42, 0xc8, 0x39, 0x78, 0x58, 0x57, 0x8c, 0xf3, 0x33, 0x21, 0xec,
          0xd9, 0x47, 0xb8, 0x70, 0xa5, 0x56, 0x89, 0x34, 0x29, 0xb3, 0x24, 0x1b, 0xbc, 0x97, 0x6b,
          0x8a, 0x3d, 0xff, 0x70, 0xcd, 0x42, 0x27, 0x74, 0xf7, 0xa6, 0x33, 0xb9, 0x21, 0x6f, 0xb7,
          0xc5, 0x9a, 0x5e, 0x43, 0xd1, 0xc4, 0xd4, 0xb2, 0x99, 0x8e, 0x41, 0x0d, 0x6f, 0x16, 0x3e,
          0xc4, 0x16, 0x81, 0x1d, 0x33, 0x97, 0x95, 0x17, 0xfb, 0x13, 0x2f, 0x4c, 0xa5, 0xaa, 0xca,
          0x69, 0x52, 0x86, 0x58, 0xa2, 0x5b, 0xef, 0xa7, 0x02, 0x55, 0xbd, 0xc7, 0x7c, 0x96, 0xb6,
          0x06, 0xaa, 0xad, 0xe7, 0xde, 0x11, 0x4d, 0x1b, 0x0b, 0x51, 0xdb, 0xd8, 0xa2, 0x77, 0xc3,
          0xa1, 0xf3, 0x2b, 0x23, 0xdc, 0x1d, 0x28, 0xda, 0xfc, 0x9e, 0xe1, 0xa1, 0x5c, 0x54, 0x08,
          0x0e, 0x44, 0xda, 0xa1, 0x73, 0xee, 0x0a, 0x1b, 0x49, 0x7b, 0xd0, 0xe5, 0x93, 0x56, 0xbb,
          0xeb, 0xf1, 0x5f, 0xcc, 0xfb, 0xd3, 0x5c, 0x95, 0xed, 0x40, 0xd1, 0x48, 0x56, 0xc1, 0x73,
          0x87, 0x76, 0x95, 0xd2, 0xeb, 0x94, 0xc4, 0x5e, 0x5c, 0xb5, 0x38, 0xad, 0x00, 0x9a, 0x0e,
          0xee, 0xcd, 0x47, 0xdb, 0x03, 0xf5, 0x19, 0xc2, 0x0f, 0xbc, 0xc7, 0x21, 0x75, 0x6a, 0x90,
          0x1a, 0x7d, 0x7c, 0x9f, 0xc8, 0xbd, 0xd8, 0x30, 0xee, 0x53, 0xfb, 0xbf, 0xf0, 0x4c, 0x42,
          0x64, 0x73, 0x81, 0xd1, 0xf5, 0x54, 0x5a, 0xcf, 0xf6, 0x9d, 0xca, 0xe1, 0x4b, 0xde, 0x75,
          0x6c, 0x59, 0xa0, 0xbd, 0x72, 0x84, 0xc1, 0xcd, 0xc2, 0x08, 0x92, 0xfa, 0x28, 0x76, 0x40,
          0x5d, 0xa7, 0x78, 0xcc, 0xd8, 0x62, 0x15, 0xed, 0xf2, 0xac, 0xef, 0x28, 0x94, 0x8f, 0xd9,
          0x02, 0x3d, 0x5d, 0x9d, 0xa4, 0xbc, 0xe2, 0x7b, 0x9b, 0xf8, 0x5c, 0x74, 0xc1, 0x8b, 0x8d,
          0x6e, 0x4e, 0x8a, 0x18, 0xb4, 0xc9, 0xf4, 0x02, 0x88, 0x1f, 0x5f, 0x12, 0x0f, 0x60, 0x96,
          0xde, 0xaa, 0x5d, 0x8b, 0x0d, 0x1e, 0xd6, 0xb1, 0x98, 0x9f, 0x78, 0x6e, 0xe2, 0x9f, 0xd4,
          0x46, 0xdb, 0x65, 0x7b, 0x87, 0x11, 0x18, 0xef, 0x84, 0xb1, 0xc1, 0x36, 0x7d, 0x7c, 0x6e,
          0x34, 0x71, 0xb2, 0xad, 0xb9, 0x2d,
  };
#endif

} // namespace aes_witness_tvs

#endif